# import libraries
import streamlit as st
import pandas as pd
import numpy as np
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
from sklearn import metrics
import seaborn as sns
import squarify
import plotly.express as px
from sklearn.preprocessing import RobustScaler 
from pyspark.sql import SparkSession
from pyspark.sql.functions import col
from scipy.cluster.hierarchy import dendrogram, linkage, fcluster
import scipy.cluster.hierarchy as sch 
import pickle
import joblib
from sklearn.preprocessing import FunctionTransformer
from sklearn.pipeline import Pipeline
import io
from sklearn.metrics import silhouette_score

st.title("Customers Segmentation")

products_df = pd.read_csv('Products_with_Categories.csv')
transactions_df = pd.read_csv('Transactions.csv')
transactions_df['Date'] = pd.to_datetime(transactions_df['Date'], format='%d-%m-%Y')
transactions_df['order_id'] = transactions_df.groupby(['Member_number', 'Date']).ngroup() + 1
merged_df = pd.merge(transactions_df, products_df, on='productId', how='left')
merged_df['Total_Cost'] = merged_df['price'] * merged_df['items']
merged_df['Month'] = merged_df['Date'].dt.to_period('M')
monthly_category_transactions = merged_df.groupby(['Month', 'Category']).size().reset_index(name='Transaction_Count')
pivot_table = monthly_category_transactions.pivot(index='Category', columns='Month', values='Transaction_Count').fillna(0)
category_counts = products_df.groupby('Category')['productName'].nunique().reset_index(name='Product_Count')
category_counts = category_counts.sort_values(by='Product_Count', ascending=False)
top_products = merged_df.groupby('productName')['Total_Cost'].sum().reset_index()
top_10_products = top_products.sort_values(by='Total_Cost', ascending=False).head(10)
top_products = merged_df.groupby('productName')['items'].sum().sort_values(ascending=False).head(10)
top_categories = merged_df.groupby('Category')['Total_Cost'].sum().reset_index()
top_10_categories = top_categories.sort_values(by='Total_Cost', ascending=False).head(10)
fresh_food_df = merged_df[merged_df['Category'] == 'Fresh Food']
top_fresh_food = fresh_food_df.groupby('productName')['Total_Cost'].sum().reset_index()
top_10_fresh_food = top_fresh_food.sort_values(by='Total_Cost', ascending=False).head(10)

df = merged_df
current_date = df['Date'].max()
rfm_df = df.groupby('Member_number').agg({
'Date': lambda x: (current_date - x.max()).days,  # Recency: S·ªë ng√†y t·ª´ giao d·ªãch cu·ªëi c√πng
'order_id': 'nunique',                            # Frequency: S·ªë ƒë∆°n h√†ng duy nh·∫•t
'Total_Cost': 'sum'                               # Monetary: T·ªïng chi ti√™u
}).reset_index()
rfm_df.columns = ['Member_number', 'Recency', 'Frequency', 'Monetary']
rfm_df = rfm_df.sort_values('Monetary', ascending=False)
# Create labels for Recency, Frequency, Monetary
r_labels = range(4, 0, -1) # s·ªë ng√†y t√≠nh t·ª´ l·∫ßn cu·ªëi mua h√†ng l·ªõn th√¨ g√°n nh√£n nh·ªè, ng∆∞·ª£c l·∫°i th√¨ nh√£n l·ªõn
f_labels = range(1, 5)
m_labels = range(1, 5)
# Assign these labels to 4 equal percentile groups
r_groups = pd.qcut(rfm_df['Recency'].rank(method='first'), q=4, labels=r_labels)
f_groups = pd.qcut(rfm_df['Frequency'].rank(method='first'), q=4, labels=f_labels)
m_groups = pd.qcut(rfm_df['Monetary'].rank(method='first'), q=4, labels=m_labels)
rfm_df = rfm_df.assign(R = r_groups.values, F = f_groups.values,  M = m_groups.values)
def join_rfm(x): return str(int(x['R'])) + str(int(x['F'])) + str(int(x['M']))
rfm_df['RFM_Segment'] = rfm_df.apply(join_rfm, axis=1)
rfm_count_unique = rfm_df.groupby('RFM_Segment')['RFM_Segment'].nunique()
rfm_df['RFM_Score'] = rfm_df[['R','F','M']].sum(axis=1)
def rfm_level(df):
    if df['RFM_Score'] == 12:
        return 'Best Customers'  # High recency, frequency, and monetary
    elif df['R'] == 1 and df['F'] == 1 and df['M'] == 1:
        return 'New Customers'  # Very low recency, frequency, and monetary
    elif df['M'] == 4:
        return 'Big Spenders'  # High monetary
    elif df['F'] == 4:
        return 'Loyal Customers'  # High frequency
    elif df['R'] == 4:
        return 'Active Customers'  # High recency
    else:
        return 'At-Risk/Occasional'  # All other cases
rfm_df['RFM_Level'] = rfm_df.apply(rfm_level, axis=1)
output_file = 'rfm_df.csv'
rfm_df.to_csv(output_file, index=True, encoding='utf-8')

menu = ["Gi·ªõi thi·ªáu t·ªïng quan", "EDA","Tra c·ª©u nh√≥m kh√°ch h√†ng"]
choice = st.sidebar.selectbox('Menu', menu)

# Thi·∫øt l·∫≠p th√¥ng tin trong sidebar
st.sidebar.title("Th√¥ng tin d·ª± √°n")
st.sidebar.markdown("""
üë®‚Äçüè´ **Gi·∫£ng vi√™n**: C√¥ Khu·∫•t Th√πy Ph∆∞∆°ng  
üèÜ **Th·ª±c hi·ªán b·ªüi**:  
Cao Th·ªã Ng·ªçc Minh & Nguy·ªÖn K·∫ø Nh·ª±t  
üìÖ **Ng√†y b√°o c√°o**: 12/04/2025  
""")

if choice == 'Gi·ªõi thi·ªáu t·ªïng quan':    
        st.markdown("""
    D·ª± √°n n√†y ƒë∆∞·ª£c thi·∫øt k·∫ø nh·∫±m h·ªó tr·ª£ **ch·ªß c·ª≠a h√†ng X** qu·∫£n l√Ω v√† ph√¢n t√≠ch d·ªØ li·ªáu kh√°ch h√†ng m·ªôt c√°ch hi·ªáu qu·∫£, t·ª´ ƒë√≥ t·ªëi ∆∞u h√≥a chi·∫øn l∆∞·ª£c kinh doanh.

    ### 1. Gi·ªõi thi·ªáu d·ª± √°n
    - ·ª®ng d·ª•ng d√†nh ri√™ng cho **ch·ªß c·ª≠a h√†ng X**.  
    - Ph√¢n t√≠ch h√†nh vi kh√°ch h√†ng d·ª±a tr√™n d·ªØ li·ªáu giao d·ªãch.  
    - Cung c·∫•p c√¥ng c·ª• tr·ª±c quan, d·ªÖ s·ª≠ d·ª•ng.  
    - H·ªó tr·ª£ ra quy·∫øt ƒë·ªãnh kinh doanh hi·ªáu qu·∫£.  

    ### 2. K·∫øt qu·∫£ ƒë·∫°t ƒë∆∞·ª£c
    - X√°c ƒë·ªãnh c√°c ph√¢n nh√≥m kh√°ch h√†ng r√µ r√†ng.  
    - D·ª±a tr√™n th√≥i quen mua s·∫Øm v√† s·ªü th√≠ch.  
    - Ph√¢n t√≠ch m·ª©c ƒë·ªô chi ti√™u c·ªßa kh√°ch h√†ng.  
    - H·ªó tr·ª£ x√¢y d·ª±ng chi·∫øn l∆∞·ª£c ti·∫øp c·∫≠n ph√π h·ª£p.  

    ### 3. L·ª£i √≠ch cho ng∆∞·ªùi d√πng
    - Giao di·ªán th√¢n thi·ªán, d·ªÖ thao t√°c.  
    - X√°c ƒë·ªãnh kh√°ch h√†ng ti·ªÅm nƒÉng nhanh ch√≥ng.  
    - C√° nh√¢n h√≥a chi·∫øn d·ªãch ti·∫øp th·ªã hi·ªáu qu·∫£.  
   
    ### 4. H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng trang web:
    - Gi·ªõi thi·ªáu t·ªïng quan: M√¥ t·∫£ d·ª± √°n, k·∫øt qu·∫£, v√† l·ª£i √≠ch, bao g·ªìm h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng.
    - EDA: Ph√¢n t√≠ch d·ªØ li·ªáu giao d·ªãch qua b·∫£ng, bi·ªÉu ƒë·ªì, v√† ph√¢n c·ª•m RFM/K-means.
    - Tra c·ª©u nh√≥m kh√°ch h√†ng: D·ª± ƒëo√°n nh√≥m kh√°ch h√†ng d·ª±a tr√™n RFM, h·ªó tr·ª£ nh·∫≠p tay ho·∫∑c file.
    """)

elif choice == 'EDA':

    # T·∫°o bi·ªÉu ƒë·ªì
    fig, ax = plt.subplots(figsize=(10, 6))  # T·∫°o figure v√† axes v·ªõi k√≠ch th∆∞·ªõc 10x6
    sns.histplot(data=products_df, x='price', bins=20, kde=True, ax=ax)  # V·∫Ω histogram v·ªõi KDE
    # ƒê·∫∑t ti√™u ƒë·ªÅ v√† nh√£n
    ax.set_title('Ph√¢n b·ªë gi√° s·∫£n ph·∫©m')
    ax.set_xlabel('Gi√° (Price)')
    ax.set_ylabel('S·ªë l∆∞·ª£ng')
    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì trong Streamlit
    st.pyplot(fig)

    # T·∫°o bi·ªÉu ƒë·ªì
    fig1, ax1 = plt.subplots(figsize=(12, 6))  # T·∫°o figure v√† axes v·ªõi k√≠ch th∆∞·ªõc 12x6
    sns.barplot(data=category_counts, x='Category', y='Product_Count', palette='viridis', ax=ax1)
    # T√πy ch·ªânh bi·ªÉu ƒë·ªì
    ax1.set_title('S·ªë l∆∞·ª£ng s·∫£n ph·∫©m theo danh m·ª•c', fontsize=14)
    ax1.set_xlabel('Danh m·ª•c (Category)', fontsize=12)
    ax1.set_ylabel('S·ªë l∆∞·ª£ng s·∫£n ph·∫©m (Product_Count)', fontsize=12)
    ax1.tick_params(axis='x', rotation=45, labelright=False, labelleft=True)  # Xoay nh√£n tr·ª•c x 45 ƒë·ªô
    plt.tight_layout()  # ƒê·∫£m b·∫£o b·ªë c·ª•c g·ªçn g√†ng
    # Th√™m s·ªë li·ªáu tr√™n m·ªói c·ªôt
    for i, v in enumerate(category_counts['Product_Count']):
        ax1.text(i, v + 0.5, str(v), ha='center', va='bottom')
    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì trong Streamlit
    st.pyplot(fig1)

    # T·∫°o bi·ªÉu ƒë·ªì
    fig, ax = plt.subplots(figsize=(14, 8))  # T·∫°o figure v√† axes v·ªõi k√≠ch th∆∞·ªõc 14x8
    sns.heatmap(pivot_table, annot=True, fmt='.0f', cmap='YlGnBu', cbar_kws={'label': 'S·ªë l∆∞·ª£ng giao d·ªãch'}, ax=ax)
    # T√πy ch·ªânh bi·ªÉu ƒë·ªì
    ax.set_title('S·ªë l∆∞·ª£ng giao d·ªãch theo th·ªùi gian v√† danh m·ª•c (Heatmap)')
    ax.set_xlabel('Th√°ng')
    ax.set_ylabel('Danh m·ª•c')
    ax.tick_params(axis='x', rotation=45)  # Xoay nh√£n tr·ª•c x 45 ƒë·ªô
    plt.tight_layout()  # ƒê·∫£m b·∫£o b·ªë c·ª•c g·ªçn g√†ng
    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì trong Streamlit
    st.pyplot(fig)

    # T·∫°o bi·ªÉu ƒë·ªì
    fig, ax = plt.subplots(figsize=(10, 6))  # T·∫°o figure v√† axes v·ªõi k√≠ch th∆∞·ªõc 10x6
    sns.histplot(data=merged_df, x='Total_Cost', bins=20, kde=True, ax=ax)
    # T√πy ch·ªânh bi·ªÉu ƒë·ªì
    ax.set_title('Ph√¢n b·ªë t·ªïng chi ph√≠ m·ªói giao d·ªãch')
    ax.set_xlabel('T·ªïng chi ph√≠ (Total Cost)')
    ax.set_ylabel('S·ªë l∆∞·ª£ng')
    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì trong Streamlit
    st.pyplot(fig)

    # T·∫°o bi·ªÉu ƒë·ªì
    fig, ax = plt.subplots(figsize=(12, 6))  # T·∫°o figure v√† axes v·ªõi k√≠ch th∆∞·ªõc 12x6
    sns.barplot(data=top_10_products, x='productName', y='Total_Cost', palette='viridis', ax=ax)
    # T√πy ch·ªânh bi·ªÉu ƒë·ªì
    ax.set_title('Top 10 m·∫∑t h√†ng c√≥ gi√° tr·ªã Total_Cost cao nh·∫•t', fontsize=14)
    ax.set_xlabel('T√™n m·∫∑t h√†ng', fontsize=12)
    ax.set_ylabel('Doanh thu (Total_Cost)', fontsize=12)
    ax.tick_params(axis='x', rotation=45, labelright=False, labelleft=True)  # Xoay nh√£n tr·ª•c x 45 ƒë·ªô
    plt.tight_layout()  # ƒê·∫£m b·∫£o b·ªë c·ª•c g·ªçn g√†ng
    # Th√™m ch√∫ th√≠ch s·ªë tr√™n m·ªói c·ªôt
    for i, v in enumerate(top_10_products['Total_Cost']):
        ax.text(i, v + 0.5, f'{v:.2f}', ha='center', va='bottom')
    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì trong Streamlit
    st.pyplot(fig)

    # T·∫°o bi·ªÉu ƒë·ªì
    fig, ax = plt.subplots(figsize=(12, 6))  # T·∫°o figure v√† axes v·ªõi k√≠ch th∆∞·ªõc 12x6
    top_products.plot(kind='bar', ax=ax)  # V·∫Ω bi·ªÉu ƒë·ªì c·ªôt t·ª´ top_products
    # T√πy ch·ªânh bi·ªÉu ƒë·ªì
    ax.set_title('Top 10 s·∫£n ph·∫©m ƒë∆∞·ª£c mua nhi·ªÅu nh·∫•t')
    ax.set_xlabel('T√™n s·∫£n ph·∫©m')
    ax.set_ylabel('T·ªïng s·ªë l∆∞·ª£ng mua')
    ax.tick_params(axis='x', rotation=45)  # Xoay nh√£n tr·ª•c x 45 ƒë·ªô
    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì trong Streamlit
    st.pyplot(fig)

    # T·∫°o bi·ªÉu ƒë·ªì
    fig, ax = plt.subplots(figsize=(12, 6))  # T·∫°o figure v√† axes v·ªõi k√≠ch th∆∞·ªõc 12x6
    sns.countplot(y='Category', data=merged_df, order=merged_df['Category'].value_counts().index, ax=ax)
    # T√πy ch·ªânh bi·ªÉu ƒë·ªì
    ax.set_title('S·ªë l∆∞·ª£ng giao d·ªãch theo danh m·ª•c')
    ax.set_xlabel('S·ªë l∆∞·ª£ng giao d·ªãch')
    ax.set_ylabel('Danh m·ª•c')
    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì trong Streamlit
    st.pyplot(fig)

    # T·∫°o bi·ªÉu ƒë·ªì
    fig, ax = plt.subplots(figsize=(12, 6))  # T·∫°o figure v√† axes v·ªõi k√≠ch th∆∞·ªõc 12x6
    sns.barplot(data=top_10_categories, y='Category', x='Total_Cost', palette='viridis', ax=ax)
    # T√πy ch·ªânh bi·ªÉu ƒë·ªì
    ax.set_title('Top 10 danh m·ª•c c√≥ doanh thu cao nh·∫•t', fontsize=14)
    ax.set_xlabel('T·ªïng doanh thu (Total_Cost)', fontsize=12)
    ax.set_ylabel('Danh m·ª•c (Category)', fontsize=12)
    plt.tight_layout()  # ƒê·∫£m b·∫£o b·ªë c·ª•c g·ªçn g√†ng
    # Th√™m ch√∫ th√≠ch s·ªë tr√™n m·ªói c·ªôt
    for i, v in enumerate(top_10_categories['Total_Cost']):
        ax.text(v + 0.5, i, f'{v:.2f}', va='center')
    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì trong Streamlit
    st.pyplot(fig)

    # T·∫°o bi·ªÉu ƒë·ªì
    fig, ax = plt.subplots(figsize=(12, 6))  # T·∫°o figure v√† axes v·ªõi k√≠ch th∆∞·ªõc 12x6
    sns.barplot(data=top_10_fresh_food, y='productName', x='Total_Cost', palette='viridis', ax=ax)
    # T√πy ch·ªânh bi·ªÉu ƒë·ªì
    ax.set_title('Top 10 m·∫∑t h√†ng trong danh m·ª•c Fresh Food c√≥ doanh thu cao nh·∫•t', fontsize=14)
    ax.set_xlabel('T·ªïng doanh thu (Total_Cost)', fontsize=12)
    ax.set_ylabel('T√™n m·∫∑t h√†ng (productName)', fontsize=12)
    plt.tight_layout()  # ƒê·∫£m b·∫£o b·ªë c·ª•c g·ªçn g√†ng
    # Th√™m ch√∫ th√≠ch s·ªë tr√™n m·ªói c·ªôt
    for i, v in enumerate(top_10_fresh_food['Total_Cost']):
        ax.text(v + 0.5, i, f'{v:.2f}', va='center')
    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì trong Streamlit
    st.pyplot(fig)
    


    
    st.subheader("Manual RFM")
        # Calculate average values for each RFM_Level, and return a size of each segment
    rfm_agg = rfm_df.groupby('RFM_Level').agg({
        'Recency': 'mean',
        'Frequency': 'mean',
        'Monetary': ['mean', 'count']}).round(0)

    rfm_agg.columns = rfm_agg.columns.droplevel()
    rfm_agg.columns = ['RecencyMean','FrequencyMean','MonetaryMean', 'Count']
    rfm_agg['Percent'] = round((rfm_agg['Count']/rfm_agg.Count.sum())*100, 2)
    # Reset the index
    rfm_agg = rfm_agg.reset_index()

    # T·∫°o figure v·ªõi k√≠ch th∆∞·ªõc t·ªïng th·ªÉ
    fig, axes = plt.subplots(3, 1, figsize=(12, 6))  # 3 h√†ng, 1 c·ªôt, k√≠ch th∆∞·ªõc 12x6
    # V·∫Ω ph√¢n ph·ªëi c·ªßa 'Recency'
    axes[0].hist(rfm_df['Recency'], bins=20, edgecolor='black')  # Histogram v·ªõi 20 bins
    axes[0].set_title('Distribution of Recency')
    axes[0].set_xlabel('Recency')
    # V·∫Ω ph√¢n ph·ªëi c·ªßa 'Frequency'
    axes[1].hist(rfm_df['Frequency'], bins=10, edgecolor='black')  # Histogram v·ªõi 10 bins
    axes[1].set_title('Distribution of Frequency')
    axes[1].set_xlabel('Frequency')
    # V·∫Ω ph√¢n ph·ªëi c·ªßa 'Monetary'
    axes[2].hist(rfm_df['Monetary'], bins=20, edgecolor='black')  # Histogram v·ªõi 20 bins
    axes[2].set_title('Distribution of Monetary')
    axes[2].set_xlabel('Monetary')
    # ƒê·∫£m b·∫£o b·ªë c·ª•c g·ªçn g√†ng
    plt.tight_layout()
    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì trong Streamlit
    st.pyplot(fig)
    st.table(rfm_df['RFM_Level'].value_counts())
    st.table(rfm_agg)

    # ƒê·ªãnh nghƒ©a t·ª´ ƒëi·ªÉn m√†u s·∫Øc
    colors_dict = {
        'Active Customers': 'yellow',
        'Big Spenders': 'royalblue',
        'Occasional Customers': 'cyan',
        'Lost Customers': 'red',
        'Loyal Customers': 'purple',
        'New Customers': 'green',
        'Best Customers': 'gold'
    }
    # T·∫°o figure v√† axes
    fig = plt.figure()  # T·∫°o figure
    ax = fig.add_subplot()  # Th√™m subplot
    fig.set_size_inches(14, 10)  # ƒê·∫∑t k√≠ch th∆∞·ªõc 14x10
    # V·∫Ω treemap
    squarify.plot(
        sizes=rfm_agg['Count'],  # K√≠ch th∆∞·ªõc √¥ d·ª±a tr√™n s·ªë l∆∞·ª£ng kh√°ch h√†ng
        text_kwargs={'fontsize': 12, 'weight': 'bold', 'fontname': 'sans serif'},  # T√πy ch·ªânh vƒÉn b·∫£n
        color=colors_dict.values(),  # G√°n m√†u t·ª´ t·ª´ ƒëi·ªÉn
        label=['{} \n{:.0f} days \n{:.0f} orders \n{:.0f} $ \n{:.0f} customers ({}%)'.format(*rfm_agg.iloc[i])
                      for i in range(0, len(rfm_agg))],  # Nh√£n v·ªõi th√¥ng tin chi ti·∫øt
        alpha=0.5  # ƒê·ªô trong su·ªët
    )
    # T√πy ch·ªânh bi·ªÉu ƒë·ªì
    plt.title("Customers Segments_Manual RFM", fontsize=26, fontweight="bold")
    plt.axis('off')  # T·∫Øt tr·ª•c
    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì trong Streamlit
    st.pyplot(fig)

    # T·∫°o bi·ªÉu ƒë·ªì ph√¢n t√°n
    fig = px.scatter(
        rfm_agg,
        x="RecencyMean",
        y="MonetaryMean",
        size="FrequencyMean",
        color="RFM_Level",
        hover_name="RFM_Level",
        size_max=100
    )
    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì trong Streamlit
    st.plotly_chart(fig, use_container_width=True)
  




    st.subheader("Kmeans RFM")

    from sklearn.cluster import KMeans
    rfm_df= pd.read_csv('rfm_df.csv')
    df_now = rfm_df[['Recency','Frequency','Monetary']]
    rfm_df['Log_Recency'] = np.log1p(rfm_df['Recency'])
    rfm_df['Log_Frequency'] = np.log1p(rfm_df['Frequency'])
    rfm_df['Log_Monetary'] = np.log1p(rfm_df['Monetary'])
    scaler = RobustScaler()
    rfm_df[['Scaled_Log_Recency', 'Scaled_Log_Frequency', 'Scaled_Log_Monetary']] = scaler.fit_transform(
        rfm_df[['Log_Recency', 'Log_Frequency', 'Log_Monetary']])
    # Elbow Method ƒë·ªÉ ch·ªçn k
    X = rfm_df[['Scaled_Log_Recency', 'Scaled_Log_Frequency', 'Scaled_Log_Monetary']]

    range_n_clusters = range(2, 11)

    # T√≠nh to√°n Silhouette Score v√† SSE
    silhouette_avg_list = []
    sse_list = []

    for n_clusters in range_n_clusters:
        kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
        cluster_labels = kmeans.fit_predict(X)
        
        # Silhouette Score
        silhouette_avg = silhouette_score(X, cluster_labels)
        silhouette_avg_list.append(silhouette_avg)
        
        # SSE
        sse = kmeans.inertia_
        sse_list.append(sse)

    # T√≠nh SSE%
    sse_percent_drop = [0]  # Ph·∫ßn trƒÉm gi·∫£m ƒë·∫ßu ti√™n = 0
    for i in range(1, len(sse_list)):
        drop = ((sse_list[i-1] - sse_list[i]) / sse_list[i-1]) * 100
        sse_percent_drop.append(drop)
        
    # L·∫•y c√°c c·ªôt ƒë√£ chu·∫©n h√≥a t·ª´ rfm_df
    df_now_scaled = rfm_df[['Scaled_Log_Recency', 'Scaled_Log_Frequency', 'Scaled_Log_Monetary']]
    # Th·ª±c hi·ªán ph√¢n c·ª•m v·ªõi k = 4
    kmeans = KMeans(n_clusters=4, random_state=42)
    kmeans.fit(df_now_scaled)
    # G√°n nh√£n ph√¢n c·ª•m v√†o c·ªôt 'Cluster' trong rfm_df
    rfm_df['Cluster'] = kmeans.labels_
    # T√≠nh trung b√¨nh v√† ƒë·∫øm s·ªë l∆∞·ª£ng cho t·ª´ng c·ª•m
    rfm_agg2 = rfm_df.groupby('Cluster').agg({
        'Recency': 'mean',
        'Frequency': 'mean',
        'Monetary': ['mean', 'count']
    }).round(0)
    # ƒê·ªïi t√™n c·ªôt
    rfm_agg2.columns = rfm_agg2.columns.droplevel()
    rfm_agg2.columns = ['RecencyMean', 'FrequencyMean', 'MonetaryMean', 'Count']
    # T√≠nh ph·∫ßn trƒÉm
    rfm_agg2['Percent'] = round((rfm_agg2['Count'] / rfm_agg2.Count.sum()) * 100, 2)
    rfm_agg2 = rfm_agg2.reset_index()

    # ƒê·ªïi ki·ªÉu d·ªØ li·ªáu c·ªôt Cluster
    rfm_agg2['Cluster'] = 'Cluster ' + rfm_agg2['Cluster'].astype('str')

    # V·∫Ω bi·ªÉu ƒë·ªì
    fig, axes = plt.subplots(1, 2, figsize=(14, 6))

    # Bi·ªÉu ƒë·ªì Silhouette
    axes[0].plot(range_n_clusters, silhouette_avg_list, 'o-', color='blue')
    axes[0].set_title('Silhouette Score vs K')
    axes[0].set_xlabel('S·ªë c·ª•m (K)')
    axes[0].set_ylabel('Silhouette Score')
    axes[0].grid(True)
    axes[0].set_xticks(list(range_n_clusters))

    # Bi·ªÉu ƒë·ªì SSE%
    axes[1].plot(range_n_clusters, sse_percent_drop, 'o-', color='green')
    axes[1].set_title('T·ª∑ l·ªá gi·∫£m SSE theo K (SSE%)')
    axes[1].set_xlabel('S·ªë c·ª•m (K)')
    axes[1].set_ylabel('Gi·∫£m SSE so v·ªõi K tr∆∞·ªõc (%)')
    axes[1].grid(True)
    axes[1].set_xticks(list(range_n_clusters))

    plt.suptitle('ƒê√°nh gi√° s·ªë l∆∞·ª£ng c·ª•m t·ªëi ∆∞u (K) theo Silhouette & SSE%', fontsize=14)
    plt.tight_layout(rect=[0, 0, 1, 0.95])

    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì trong Streamlit
    st.pyplot(fig)

    # T·∫°o bi·ªÉu ƒë·ªì ph√¢n t√°n
    fig = px.scatter(
        rfm_agg2,
        x="RecencyMean",
        y="MonetaryMean",
        size="FrequencyMean",
        color="Cluster",
        hover_name="Cluster",
        size_max=100
    )
    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì trong Streamlit
    st.plotly_chart(fig, use_container_width=True)

    # ƒê·ªãnh nghƒ©a t·ª´ ƒëi·ªÉn m√†u s·∫Øc
    colors_dict2 = {
        'Cluster0': 'yellow',
        'Cluster1': 'royalblue',
        'Cluster2': 'cyan',
        'Cluster3': 'red',
    }

        # ƒê·ªãnh nghƒ©a t·ª´ ƒëi·ªÉn √°nh x·∫°
    cluster_to_group = {
        0: 'Loyal Customers',
        1: 'At-Risk Customers',
        2: 'VIP',
        3: 'Lost Customers'
    }

    # Th√™m c·ªôt 'Cluster_Name' v√†o rfm_agg2
    rfm_agg2['Cluster_Name'] = rfm_agg2['Cluster'].apply(lambda x: cluster_to_group[int(x.split()[-1])])

    # T·∫°o figure v√† axes
    fig = plt.figure()
    ax = fig.add_subplot()
    fig.set_size_inches(14, 10)

    # V·∫Ω Treemap
    squarify.plot(
        sizes=rfm_agg2['Count'],
        text_kwargs={'fontsize': 12, 'weight': 'bold', 'fontname': "sans serif"},
        color=colors_dict2.values(),
        label=['{} \n{:.0f} days \n{:.0f} orders \n{:.0f} $ \n{:.0f} customers ({}%)'.format(
            rfm_agg2['Cluster_Name'].iloc[i],  # S·ª≠ d·ª•ng Cluster_Name thay v√¨ Cluster
            rfm_agg2['RecencyMean'].iloc[i],
            rfm_agg2['FrequencyMean'].iloc[i],
            rfm_agg2['MonetaryMean'].iloc[i],
            rfm_agg2['Count'].iloc[i],
            rfm_agg2['Percent'].iloc[i]
        ) for i in range(0, len(rfm_agg2))],
        alpha=0.5
    )

    # T√πy ch·ªânh bi·ªÉu ƒë·ªì
    plt.title("Customers Segments_Kmeans RFM", fontsize=26, fontweight="bold")
    plt.axis('off')

    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì trong Streamlit
    st.pyplot(fig)




elif choice=='Tra c·ª©u nh√≥m kh√°ch h√†ng':
    pipeline = joblib.load('customer_segmentation_pipeline.pkl')
    cluster_to_group = {
        0: 'Loyal Customers', #Mua g·∫ßn ƒë√¢y, t·∫ßn su·∫•t ·ªïn ƒë·ªãnh, chi ti√™u kh√° cao.
        1: 'At-Risk Customers', #L√¢u kh√¥ng mua, t·∫ßn su·∫•t th·∫•p, chi ti√™u kh√¥ng n·ªïi b·∫≠t.
        2: 'VIP', #Mua th∆∞·ªùng xuy√™n, chi ti√™u cao, d√π kh√¥ng ph·∫£i g·∫ßn ƒë√¢y nh·∫•t.
        3: 'Lost Customers' #L√¢u kh√¥ng mua, hi·∫øm khi mua, chi ti√™u r·∫•t th·∫•p.
    }
    # Ch·ªçn nh·∫≠p m√£ kh√°ch h√†ng ho·∫∑c nh·∫≠p th√¥ng tin kh√°ch h√†ng v√†o dataframe
    st.write("#### Ch·ªçn c√°ch nh·∫≠p th√¥ng tin kh√°ch h√†ng")
    type = st.radio("Ch·ªçn c√°ch nh·∫≠p th√¥ng tin kh√°ch h√†ng", options=["Nh·∫≠p m√£ kh√°ch h√†ng", "Nh·∫≠p th√¥ng tin kh√°ch h√†ng v√†o dataframe","T·∫£i file Excel/CSV"])
    if type == "Nh·∫≠p m√£ kh√°ch h√†ng":
        # N·∫øu ng∆∞·ªùi d√πng ch·ªçn nh·∫≠p m√£ kh√°ch h√†ng
        # T·∫°o ƒëi·ªÅu khi·ªÉn ƒë·ªÉ ng∆∞·ªùi d√πng nh·∫≠p m√£ kh√°ch h√†ng
        customer_id = st.text_input("##### Nh·∫≠p m√£ kh√°ch h√†ng")
        # N·∫øu ng∆∞·ªùi d√πng nh·∫≠p m√£ kh√°ch h√†ng, th·ª±c hi·ªán c√°c x·ª≠ l√Ω ti·∫øp theo
        # ƒê·ªÅ xu·∫•t kh√°ch h√†ng thu·ªôc c·ª•m n√†o
        # In k·∫øt qu·∫£ ra m√†n h√¨nh
        st.write("M√£ kh√°ch h√†ng:", customer_id)
        if customer_id:  # Ki·ªÉm tra n·∫øu c√≥ m√£ kh√°ch h√†ng
            try:
                customer_data = rfm_df[rfm_df['Member_number'] == int(customer_id)][['Recency', 'Frequency', 'Monetary','RFM_Level']]
                if not customer_data.empty:
                    st.write("Th√¥ng tin RFM:", customer_data)
                    cluster = pipeline.predict(customer_data[['Recency', 'Frequency', 'Monetary']])
                    group_name = cluster_to_group[cluster[0]]
                    st.write(f"Kh√°ch h√†ng thu·ªôc c·ª•m: {group_name}")
                    rfm_level = customer_data['RFM_Level'].iloc[0]
                    st.write(f"Kh√°ch h√†ng thu·ªôc c·ª•m theo t·∫≠p lu·∫≠n RFM: {rfm_level}")
                else:
                    st.write("Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng v·ªõi m√£ n√†y.")
            except ValueError:
                st.write("Vui l√≤ng nh·∫≠p m√£ kh√°ch h√†ng h·ª£p l·ªá (s·ªë nguy√™n).")
    elif type == "Nh·∫≠p th√¥ng tin kh√°ch h√†ng v√†o dataframe":
        # N·∫øu ng∆∞·ªùi d√πng ch·ªçn nh·∫≠p th√¥ng tin kh√°ch h√†ng v√†o dataframe c√≥ 3 c·ªôt l√† Recency, Frequency, Monetary
        st.write("##### Th√¥ng tin kh√°ch h√†ng")
        # T·∫°o ƒëi·ªÅu khi·ªÉn table ƒë·ªÉ ng∆∞·ªùi d√πng nh·∫≠p th√¥ng tin kh√°ch h√†ng tr·ª±c ti·∫øp tr√™n table
        st.write("Nh·∫≠p th√¥ng tin kh√°ch h√†ng")
        # T·∫°o dataframe ƒë·ªÉ ng∆∞·ªùi d√πng nh·∫≠p th√¥ng tin kh√°ch h√†ng
        # T·∫°o danh s√°ch t·∫°m ƒë·ªÉ l∆∞u th√¥ng tin kh√°ch h√†ng
        customer_data = []
        for i in range(5):
            st.write(f"Kh√°ch h√†ng {i+1}")
            recency = st.slider("Recency (ng√†y)", 1, 365, 100, key=f"recency_{i}")
            frequency = st.slider("Frequency (ƒë∆°n h√†ng)", 1, 50, 5, key=f"frequency_{i}")
            monetary = st.slider("Monetary ($)", 1, 1000, 100, key=f"monetary_{i}")
            customer_data.append({"Recency": recency, "Frequency": frequency, "Monetary": monetary})

        # Chuy·ªÉn danh s√°ch th√†nh DataFrame
        df_customer = pd.DataFrame(customer_data)          
        # Th·ª±c hi·ªán ph√¢n c·ª•m kh√°ch h√†ng d·ª±a tr√™n gi√° tr·ªã c·ªßa 3 c·ªôt n√†y
        if not df_customer.empty:
            st.write("Ph√¢n c·ª•m kh√°ch h√†ng...")
            # D·ª± ƒëo√°n c·ª•m b·∫±ng pipeline
            clusters = pipeline.predict(df_customer)
            # Th√™m c·ªôt 'Kmeans_RFM' v√†o DataFrame
            df_customer['Kmeans_RFM'] = [cluster_to_group[cluster] for cluster in clusters]
        # In k·∫øt qu·∫£ ra m√†n h√¨nh
        st.write("##### 3. Ph√¢n c·ª•m kh√°ch h√†ng")
        st.write(df_customer)
        # T·ª´ k·∫øt qu·∫£ ph√¢n c·ª•m kh√°ch h√†ng, ng∆∞·ªùi d√πng c√≥ th·ªÉ xem th√¥ng tin chi ti·∫øt c·ªßa t·ª´ng c·ª•m kh√°ch h√†ng, xem bi·ªÉu ƒë·ªì, th·ªëng k√™...
        # ho·∫∑c th·ª±c hi·ªán c√°c x·ª≠ l√Ω kh√°c
    elif type == "T·∫£i file Excel/CSV":
        # N·∫øu ng∆∞·ªùi d√πng ch·ªçn t·∫£i file Excel/CSV
        st.write("##### T·∫£i file Excel ho·∫∑c CSV")
        # T·∫°o file m·∫´u ƒë·ªÉ t·∫£i v·ªÅ
        sample_df = pd.DataFrame(columns=['Member_number', 'Recency', 'Frequency', 'Monetary'])
        # Chuy·ªÉn DataFrame th√†nh CSV buffer
        csv_buffer = io.StringIO()
        sample_df.to_csv(csv_buffer, index=False)
        csv_data = csv_buffer.getvalue()
        # Chuy·ªÉn DataFrame th√†nh Excel buffer
        excel_buffer = io.BytesIO()
        sample_df.to_excel(excel_buffer, index=False)
        excel_data = excel_buffer.getvalue()
        # Th√™m n√∫t t·∫£i file m·∫´u (CSV v√† Excel)
        st.write("T·∫£i file m·∫´u ƒë·ªÉ ƒëi·ªÅn d·ªØ li·ªáu:")
        col1, col2 = st.columns(2)
        with col1:
            st.download_button(
                label="T·∫£i file CSV m·∫´u",
                data=csv_data,
                file_name="customer_data_template.csv",
                mime="text/csv"
            )
        with col2:
            st.download_button(
                label="T·∫£i file Excel m·∫´u",
                data=excel_data,
                file_name="customer_data_template.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )   
        # Upload file
        uploaded_file = st.file_uploader("Ch·ªçn file Excel ho·∫∑c CSV", type=["csv", "xlsx"])
        if uploaded_file is not None:
            try:
                # ƒê·ªçc file d·ª±a tr√™n ƒë·ªãnh d·∫°ng
                if uploaded_file.name.endswith('.csv'):
                    df_uploaded = pd.read_csv(uploaded_file)
                elif uploaded_file.name.endswith('.xlsx'):
                    df_uploaded = pd.read_excel(uploaded_file)
                # Hi·ªÉn th·ªã d·ªØ li·ªáu ban ƒë·∫ßu
                st.write("##### 2. D·ªØ li·ªáu t·ª´ file t·∫£i l√™n")
                st.write(df_uploaded)
                # Ki·ªÉm tra c√°c c·ªôt c·∫ßn thi·∫øt
                required_columns = ['Recency', 'Frequency', 'Monetary']
                if all(col in df_uploaded.columns for col in required_columns):
                    # D·ª± ƒëo√°n c·ª•m
                    clusters = pipeline.predict(df_uploaded[required_columns])
                    df_uploaded['Kmeans_RFM'] = [cluster_to_group[cluster] for cluster in clusters]
                    # Hi·ªÉn th·ªã k·∫øt qu·∫£ ph√¢n c·ª•m
                    st.write("##### 3. K·∫øt qu·∫£ ph√¢n c·ª•m kh√°ch h√†ng")
                    st.write(df_uploaded)
                else:
                    st.error("File t·∫£i l√™n c·∫ßn c√≥ c√°c c·ªôt: Recency, Frequency, Monetary")
            except Exception as e:
                st.error(f"ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω file: {str(e)}")
        else:
            st.info("Vui l√≤ng t·∫£i l√™n m·ªôt file Excel ho·∫∑c CSV ƒë·ªÉ b·∫Øt ƒë·∫ßu.")